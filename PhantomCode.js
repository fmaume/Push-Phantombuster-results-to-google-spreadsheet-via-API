// Phantombuster configuration {
"phantombuster command: nodejs"
"phantombuster package: 6"
"phantombuster dependencies: lib-StoreUtilities.js"
"phantombuster flags: save-folder"
// }
const Buster = require("phantombuster")
const buster = new Buster()
//const puppeteer = require("puppeteer")

const StoreUtilities = require("./lib-StoreUtilities")
const utils = new StoreUtilities(buster)

// import library to manage google sheet
const { GoogleSpreadsheet } = require("google-spreadsheet");


console.log("dependecy loaded")




async function main() {
    //load buster argument
    const arg = buster.argument

    //load agent object
    let object = await buster.getAgentObject()
    // check if first run. Set lastProcess to 1 to skip header line
    let LastProcessed = 1
    if (object.LastProcessed > 1) {
        LastProcessed = object.LastProcessed
    }


    // get input from the input file using function from StoreUtilities
    ResultData = await utils.getRawCsv(arg.Input_url)
    console.log("Phantombuster output loaded with the following number of raw")
    console.log(ResultData.length)

    if (ResultData.length < LastProcessed) {
        console.log("all output are already in the google sheet")
    } else {
        console.log("there are some new rows to add to the google sheet")
    

        let PhantomHeader= ResultData[0]
        console.log("with the following headers")
        console.log(PhantomHeader)

        // connect to the sheet
        console.log("will try to connect to the following spreadshit")
        console.log(GoogleSpreadsheet)
        const doc = new GoogleSpreadsheet('1alh0ZZDbhc7NQmu4t4W4mbrUWS-9gxG9PsQpvqZUt8k')



        //connect to the spreasheet
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: arg.GOOGLE_SERVICE_ACCOUNT_EMAIL,
            private_key: arg.GOOGLE_PRIVATE_KEY,
        });

        console.log("connected to the googleSheet")
        console.log("will connect the the desired sheet")

        //connect to a specific sheet
        await doc.loadInfo()

        const sheet = doc.sheetsByTitle[arg.sheetTitle]
        console.log("connected to the sheet:")
        console.log(sheet.title);
        console.log("sheet number of raw:")
        console.log(sheet.rowCount);

        //check list of collumn title and add missing one if required
        await sheet.loadHeaderRow()
        collumnHeader = await sheet.headerValues
        console.log("the sheet as the following header")
        console.log(collumnHeader)

        let newHeader = PhantomHeader.filter(x => !collumnHeader.includes(x));
        if (newHeader.length > 0) {
            console.log("found the following new header")
            console.log(newHeader)

            // create expended header list
            for (elements of newHeader) {
                collumnHeader.push(elements)
            }
            // update header row
            sheet.setHeaderRow(collumnHeader)
        } else {
            console.log("no new header found")
        }

        // create array of rows to add
        let rowsToAdd = ResultData.slice(LastProcessed, ResultData.length)
        let apiInput = []

        for (element of rowsToAdd) {
            let stemp = {}
            for (column in PhantomHeader) {
                stemp[PhantomHeader[column]] = element[column]
                console.log(stemp)
            }
            apiInput.push(stemp)
        }
        console.log(apiInput)



        //append data to a specific sheet
        await sheet.addRows(apiInput)
        console.log("row added")

        // update agent object with the last processed row
        object.LastProcessed = ResultData.length
        await buster.setAgentObject(object)
        console.log("agent object updated")
    }



    process.exit()

}



//catch all error to call the main function
async function main_with_error_handling() {
    try {
        await main()
    } catch (error) {
        console.error(error);
        console.log("some error occured contact Tetriz.io for support")
        console.log("https://www.linkedin.com/in/fabian-maume/?locale=en_US")
        process.exit(1)
    }
}
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


main_with_error_handling()
